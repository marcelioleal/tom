package org.tom.GUI;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

import org.tom.Application;
import org.tom.FileManipulation;
import org.tom.GUI.matrix.ActorUseCase;
import org.tom.GUI.matrix.FeatureActor;
import org.tom.GUI.matrix.MatrixTableRenderer;
import org.tom.GUI.matrix.NeedFeature;
import org.tom.GUI.prefuse.ImpactXML;
import org.tom.GUI.prefuse.ItemsGraph;
import org.tom.GUI.prefuse.ArtifactsGraph;
import org.tom.GUI.prefuse.ItemsTraceability;
import org.tom.GUI.prefuse.RadialGraphView;
import org.tom.GUI.prefuse.TreeView;
import org.tom.entities.structuredDB.Item;
import org.tom.entities.structuredDB.Link;
import org.tom.manager.structured.ItemsManager;
import org.tom.manager.structured.LinkManager;

import prefuse.Display;
import prefuse.Visualization;
import prefuse.data.Table;
import prefuse.data.io.DataIOException;
import prefuse.data.io.GraphMLReader;
import prefuse.data.query.SearchQueryBinding;
import prefuse.data.search.SearchTupleSet;
import prefuse.util.ColorLib;
import prefuse.util.ui.JSearchPanel;

public class MainWindow extends JFrame {

	private static final long serialVersionUID = 1L;
	private JPanel jContentPane = null;
	private JPanel mainPanel = null;
	private JPanel graphPanel = null;

	//menu
	private JMenuBar mainMenuBar = null;
	private JMenu menuProject = null;
	private JMenu menuVisualization = null;
	private JMenuItem menuItemTraceProject = null;
	private JMenu menuTraceabilityMatrix = null;
	private JMenuItem menuItemNeedXFeature = null;
	private JMenuItem menuItemFeatureXActor = null;
	private JMenuItem menuItemActorXUC = null;
	private JMenu menuTraceabilityGraph = null;
	private JMenuItem menuItemItemsGraph = null;
	private JMenuItem menuItemArtifactsGraph = null;
	
	//graphs
	private JPanel graphViewItemsPanel;
	private JPanel informationPanel;
	private JPanel SearchPanel;
	
	private JPanel graphViewArtifactsPanel;
	
	private FileManipulation fileManipulation = new FileManipulation();
	private Application application = new Application(); 
//	private JMenuItem menuItemDBConfiguration = null;
	
	//tree
	private JScrollPane filesTreeScroll = null;
	private JTree filesTree = null;
	private String projectPath = null;  
	private JScrollPane textScroll = new JScrollPane();
	private JEditorPane textEditorPane = null;
	
	//popup
	private JPopupMenu popup = null;
	private JMenuItem popupItemViewFile = null;
	private JMenuItem popupItemImpactAnalysis = null;
	
	//tables
	private JScrollPane scrollTable = null;
	private JTable matrixTable = null;
	//this indicates if a project was traced to allow the other actions
	private boolean trace = false;
	GridBagConstraints gridBagConstraints = null;
	
	LinkManager lm = new LinkManager();  
	ItemsManager im = new ItemsManager();
	List<Item> items;
	List<Link> links;
	/**
	 * This is the default constructor
	 */
	public MainWindow() {
		super();
		initialize();
	}

	/**
	 * This method initializes this
	 * 
	 * @return void
	 */
	private void initialize() {
		this.setSize(800, 600);
		this.setJMenuBar(getMainMenuBar());
		this.setContentPane(getJContentPane());
		this.setTitle("Software Traceability");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
		setVisible(true);
	}

	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getJContentPane() {
		if (jContentPane == null) {
			jContentPane = new JPanel();
			jContentPane.setLayout(new BorderLayout());
			jContentPane.add(getMainPanel(), BorderLayout.CENTER);
		}
		return jContentPane;
	}
	/**
	 * This method initializes mainMenuBar	
	 * 	
	 * @return javax.swing.JMenuBar	
	 */
	private JMenuBar getMainMenuBar() {
		if (mainMenuBar == null) {
			mainMenuBar = new JMenuBar();
			mainMenuBar.add(getMenuProject());
			mainMenuBar.add(getMenuVisualization());
		}
		return mainMenuBar;
	}

	/**
	 * This method initializes menuProject	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getMenuProject() {
		if (menuProject == null) {
			menuProject = new JMenu();
			menuProject.setText("Trace");
			menuProject.add(getMenuItemTraceProject());
//			menuProject.add(getMenuItemDBConfiguration());
		}
		return menuProject;
	}

	/**
	 * This method initializes menuVisualization	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getMenuVisualization() {
		if (menuVisualization == null) {
			menuVisualization = new JMenu();
			menuVisualization.setText("Visualization");
			menuVisualization.add(getMenuTraceabilityMatrix());
			menuVisualization.add(getMenuTraceabilityGraph());
		}
		return menuVisualization;
	}

	/**
	 * This method initializes menuItemTraceProject	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemTraceProject() {
		if (menuItemTraceProject == null) {
			menuItemTraceProject = new JMenuItem();
			menuItemTraceProject.setText("Trace Project");
			menuItemTraceProject.addActionListener(new ActionListener(){
				public void actionPerformed(ActionEvent e) {
					displayProjectTree();
					//TODO passar dados do bd não estruturado para estruturado
					items = im.getItems();
					links = lm.getLinks();					
				}
			});
		}
		return menuItemTraceProject;
	}

	/**
	 * This method initializes jScrollPane	
	 * 	
	 * @return javax.swing.JScrollPane	
	 */
	private JScrollPane getFilesTreeScroll(DefaultMutableTreeNode node) {
		if (filesTreeScroll == null) {
			filesTreeScroll = new JScrollPane();
			filesTreeScroll.setViewportView(getFilesTree(node));
		}
		return filesTreeScroll;
	}

	/**
	 * This method initializes jScrollPane	
	 * 	
	 * @return javax.swing.JScrollPane	
	 */
	private JScrollPane getTextScroll(String text) {
		textScroll = new JScrollPane();
		textScroll.setViewportView(getTextEditorPane(text));
		return textScroll;
	}

	/**
	 * This method initializes jEditorPane	
	 * 	
	 * @return javax.swing.JEditorPane	
	 */
	private JEditorPane getTextEditorPane(String text) {
		textEditorPane = new JEditorPane();
		textEditorPane.setText(text);
		return textEditorPane;
	}
	
	/**
	 * This method initializes menuTraceabilityMatrix	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getMenuTraceabilityMatrix() {
		if (menuTraceabilityMatrix == null) {
			menuTraceabilityMatrix = new JMenu();
			menuTraceabilityMatrix.setText("Matrix");
			menuTraceabilityMatrix.add(getMenuItemNeedXFeature());
			menuTraceabilityMatrix.add(getMenuItemFeatureXActor());
			menuTraceabilityMatrix.add(getMenuItemActorXUC());
		}
		return menuTraceabilityMatrix;
	}

	/**
	 * This method initializes menuItemNeedXFeature	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemNeedXFeature() {
		if (menuItemNeedXFeature == null) {
			menuItemNeedXFeature = new JMenuItem();
			menuItemNeedXFeature.setText("Need X Feature");
			menuItemNeedXFeature.setMnemonic(menuItemNeedXFeature.getText().charAt(0));
			menuItemNeedXFeature.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					if(trace) displayMatrix(1);
					else JOptionPane.showMessageDialog(null, "You have to trace the project first.");
				}
			});
		}
		return menuItemNeedXFeature;
	}

	
	/**
	 * This method initializes menuItemFeatureXActor	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemFeatureXActor() {
		if (menuItemFeatureXActor == null) {
			menuItemFeatureXActor = new JMenuItem();
			menuItemFeatureXActor.setText("Feature X Actor");
			menuItemFeatureXActor.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					if(trace) displayMatrix(2);
					else JOptionPane.showMessageDialog(null, "You have to trace the project first.");
				}
			});
		}
		return menuItemFeatureXActor;
	}

	/**
	 * This method initializes menuItemActorXUC	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemActorXUC() {
		if (menuItemActorXUC == null) {
			menuItemActorXUC = new JMenuItem();
			menuItemActorXUC.setText("Actor X Use Case");
			menuItemActorXUC.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					if(trace) displayMatrix(3);
					else JOptionPane.showMessageDialog(null, "You have to trace the project first.");
				}
			});
		}
		return menuItemActorXUC;
	}

	/**
	 * This method initializes menuTraceabilityGraph	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getMenuTraceabilityGraph() {
		if (menuTraceabilityGraph == null) {
			menuTraceabilityGraph = new JMenu();
			menuTraceabilityGraph.setText("Graph");
			menuTraceabilityGraph.add(getMenuItemItemsGraph());
			menuTraceabilityGraph.add(getMenuItemArtifactsGraph());
		}
		return menuTraceabilityGraph;
	}

	/**
	 * This method initializes menuItemItemsGraph	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemItemsGraph() {
		if (menuItemItemsGraph == null) {
			menuItemItemsGraph = new JMenuItem();
			menuItemItemsGraph.setText("Items");
			menuItemItemsGraph.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					displayItemsGraph();
				}
			});
		}
		return menuItemItemsGraph;
	}

	
	/**
	 * This method initializes menuItemArtifactsGraph	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getMenuItemArtifactsGraph() {
		if (menuItemArtifactsGraph == null) {
			menuItemArtifactsGraph = new JMenuItem();
			menuItemArtifactsGraph.setText("Artifacts");
			menuItemArtifactsGraph.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					displayArtifactsGraph();
				}
			});
		}
		return menuItemArtifactsGraph;
	}
	
	

	/**
	 * This method initializes mainPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getMainPanel() {
		if (mainPanel == null) {
			mainPanel = new JPanel();
			mainPanel.setLayout(new BorderLayout());
//			mainPanel.setBorder( BorderFactory.createLineBorder(Color.RED, 4));
			mainPanel.add(getGraphPanel(), BorderLayout.CENTER);
			mainPanel.add(getInformationPanel(), BorderLayout.EAST);
//			mainPanel.add(getGraphViewArtifactsPanel(), BorderLayout.CENTER);
		}
		return mainPanel;
	}
	
	/**
	 * This method initializes graphPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getGraphPanel() {
		if (graphPanel == null) {
			graphPanel = new JPanel();
			graphPanel.setLayout(new BorderLayout());
		}
		return graphPanel;
	}
	
	
	/**
	 * This method initializes graphViewItemsPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getGraphViewItemsPanel() {
		if (graphViewItemsPanel == null) {
			graphViewItemsPanel = new JPanel();
			graphViewItemsPanel.setLayout(new BorderLayout());
//			graphViewItemsPanel.setBorder( BorderFactory.createLineBorder(Color.BLUE, 4));
		}
		return graphViewItemsPanel;
	}
	
	/**
	 * This method initializes graphViewArtifactsPanel	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getGraphViewArtifactsPanel() {
		if (graphViewArtifactsPanel == null) {
			graphViewArtifactsPanel = new JPanel();
			graphViewArtifactsPanel.setLayout(new BorderLayout());
//			graphViewItemsPanel.setBorder( BorderFactory.createLineBorder(Color.BLUE, 4));
		}
		return graphViewArtifactsPanel;
	}
	
	private JPanel getSearchPanel() {
		if (SearchPanel == null) {
			SearchPanel = new JPanel();
			SearchPanel.setLayout(new FlowLayout());
			JLabel labelFiltro = new JLabel();
			labelFiltro.setText("filter by:");
			SearchPanel.add(labelFiltro);
//			searchButton = new JButton();
//			searchButton.setText("Search");
//			searchButton.setPreferredSize(new Dimension(74,23));
//			SearchPanel.add(searchButton);
//			searchTextField = new JTextField();
//			searchTextField.setPreferredSize(new Dimension(100,23));
//			SearchPanel.add(searchTextField);
		}
		return SearchPanel;
	}
	
	JPanel checkPanel = null;
	private JPanel getCheckPanel(RadialGraphView radial){
		final RadialGraphView r = radial;
		if(checkPanel == null){
			checkPanel = new JPanel();
			checkPanel.setLayout(new GridLayout());
			JCheckBox check = new JCheckBox();
			check.setText("teste");
			check.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					JCheckBox c = (JCheckBox)e.getSource();
					if(c.isSelected())	{
						System.out.println("akiiia");
//						r.busca();
					}
				}
				
			});
			checkPanel.add(check);
		}
		return checkPanel;
	}
	
	private JPanel getInformationPanel() {
		if (informationPanel == null) {
			informationPanel = new JPanel();
			informationPanel.setLayout(new GridLayout(10,1));//(new BorderLayout());
//			graphViewItemsPanel.setBorder( BorderFactory.createLineBorder(Color.BLUE, 4));
		}
		return informationPanel;
	}
	
	
	/**
	 * This method initializes jPopupMenu	
	 * 	
	 * @return javax.swing.JPopupMenu	
	 */
	private JPopupMenu getPopupMenu(String path) {
		int index = path.lastIndexOf(System.getProperty("file.separator")) + 1;
		String fileName = path.substring(index, path.length());
		if (popup == null) {
			popup = new JPopupMenu();
			popup.add(getPopupItemViewFile(path));
			popup.add(getPopupItemImpactAnalysis(fileName));
		}
		return popup;
	}
	
	/**
	 * This method initializes popupItemViewFile	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getPopupItemViewFile(String filePath) {
		final String path = filePath;
		if (popupItemViewFile == null) {
			popupItemViewFile = new JMenuItem();
			popupItemViewFile.setText("View file content");
			popupItemViewFile.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					displaySelectedFile(path);
				}
			});
		}
		return popupItemViewFile;
	}
	
	/**
	 * This method initializes popupItemImpactAnalysis	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getPopupItemImpactAnalysis(String fileName) {
		final String name = fileName;
		if (popupItemImpactAnalysis == null) {
			popupItemImpactAnalysis = new JMenuItem();
			popupItemImpactAnalysis.setText("Impact Analysis");
			popupItemImpactAnalysis.addActionListener(new ActionListener(){
				
				public void actionPerformed(ActionEvent e) {
					displaySelectedFileTraceability(name);
				}
			});
		}
		return popupItemImpactAnalysis;
	}

	
	/**
	 * This method initializes jTree	
	 * 	
	 * @return javax.swing.JTree	
	 */
	private JTree getFilesTree(DefaultMutableTreeNode mainNode) {
		final DefaultMutableTreeNode mainNode2 = mainNode;
		if (filesTree == null) {
			filesTree = new JTree(mainNode);	
			filesTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
			filesTree.addMouseListener(new MouseListener(){
			
			public void mouseClicked(MouseEvent e) {
				displaySelectedTreeFilePopup(e, mainNode2);
			}
			
			public void mouseEntered(MouseEvent e) {
			}
			
			public void mouseExited(MouseEvent e) {
			}
			
			public void mousePressed(MouseEvent e) {
			}
			
			public void mouseReleased(MouseEvent e) {
			}
		});
		}
		return filesTree;
	}
	
	
	
	/**
	 * This method initializes scrollTable	
	 * 	
	 * @return javax.swing.JScrollPane	
	 */
	private JScrollPane getScrollTable(int matrix) {
		if(scrollTable != null) jContentPane.remove(scrollTable);
		scrollTable = new JScrollPane();
		scrollTable.setViewportView(getMatrixTable(matrix));
		return scrollTable;
	}

	/**
	 * This method initializes jTable	
	 * 	
	 * @return javax.swing.JTable	
	 */
	private JTable getMatrixTable(int matrix) {
		String[] columns = null;
		String[][] matrixLines = null;
		String[][] lines = null;
		switch (matrix) {
		case 1:{
			NeedFeature nf = new NeedFeature();
			nf.matrix();
			columns = nf.getTableColumns();
			matrixLines = nf.getTableLines();
	        lines = nf.getLines();
	        
			break;
		}
		case 2:{
			FeatureActor fa = new FeatureActor();
			fa.matrix();
			columns = fa.getTableColumns();
			matrixLines = fa.getTableLines();
			lines = fa.getLines();
			break;
		}
		case 3:{
			ActorUseCase auc = new ActorUseCase();
			auc.matrix();
			columns = auc.getTableColumns();
			matrixLines = auc.getTableLines();
			lines = auc.getLines();
			break;
		}
			
		default:
			break;
		}
		
		DefaultTableModel model = new DefaultTableModel(matrixLines, columns);
		matrixTable = new JTable(model);
        MatrixTableRenderer renderer = new MatrixTableRenderer();
        matrixTable.setDefaultRenderer(Object.class, renderer);
        for(int i = 0; i < lines.length; i++){
        	for(int j = 0; j < lines[0].length; j++)
        		if(lines[i][j] == "x") renderer.paintCell(i, j, Color.blue);
        }
		
		return matrixTable;
	}
	
	
	
	/********************** display methods ************************/

	JComponent componente = null;
	/**
	 * This method displays the content of the tree's selected file
	 * @param filePath
	 */
	public void displaySelectedFile(String filePath){
		jContentPane.remove(textScroll);
		jContentPane.remove(mainPanel);
		jContentPane.add(getTextScroll(fileManipulation.fileToString(new File(filePath))), BorderLayout.CENTER);
		jContentPane.repaint();
		jContentPane.validate();
	}
	
	public void displaySelectedFileTraceability(String fileName){
		System.out.println("mainwindow: " + fileName);
		ImpactXML xml = new ImpactXML(items, links);
		FileManipulation fileManipulation = new FileManipulation();
		fileManipulation.writeFile(new File("tree.xml"), xml.createXMLContent(fileName));
		
		if(scrollTable != null) mainPanel.remove(scrollTable);
		componente = TreeView.demo("tree.xml", "name");
		mainPanel.remove(graphPanel);
//		graphPanel = painel;
		mainPanel.add(componente);
		if(textEditorPane != null) jContentPane.remove(textEditorPane);
		jContentPane.remove(textScroll);
		jContentPane.repaint();
		jContentPane.validate();
	}

	
	/**
	 * this method displays the chosen matrix on the screen
	 */
	public void displayMatrix(int matrix){
		if(scrollTable != null) mainPanel.remove(scrollTable);
		gridBagConstraints = new GridBagConstraints();
		gridBagConstraints.fill = GridBagConstraints.BOTH;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.gridx = 0;
		mainPanel.setLayout(new GridBagLayout());
		mainPanel.add(getScrollTable(matrix), gridBagConstraints);
		jContentPane.add(mainPanel);
		jContentPane.validate();
	}
	
	/**
	 * This method displays the items traceability graph 
	 */
	public void displayItemsGraph(){
		if(trace){
//			AggregateDemo ad = new AggregateDemo();
			ItemsTraceability itemsTraceability = new ItemsTraceability(items, links);
			FileManipulation fileManipulation = new FileManipulation();
			fileManipulation.writeFile(new File("teste.xml"), itemsTraceability.getXMLInformation());
//			ItemsGraph ad = new ItemsGraph(getGraphViewItemsPanel());		
			if(scrollTable != null) mainPanel.remove(scrollTable);
			RadialGraphView r = new RadialGraphView(this);
			try {
				graphViewItemsPanel = r.radialGraphView(new GraphMLReader().readGraph("teste.xml"), "name");
			} catch (DataIOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if(componente != null) mainPanel.remove(componente);
			mainPanel.remove(graphPanel);
			graphPanel = graphViewItemsPanel;
			mainPanel.add(graphPanel);
			if(textEditorPane != null) jContentPane.remove(textEditorPane);
			jContentPane.remove(textScroll);
			jContentPane.repaint();
			jContentPane.validate();
		}
		else JOptionPane.showMessageDialog(null, "You have to trace the project first.");
	}
	
	/**
	 * this method displays the project tree
	 */
	public void displayProjectTree(){
		String filePath = fileManipulation.getFilePath(0, null); 
		if(filePath != null){
			setProjectPath(filePath);
			int index = filePath.lastIndexOf(System.getProperty("file.separator")) + 1;
			String projectName = filePath.substring(index, filePath.length());
			DefaultMutableTreeNode mainNode = new DefaultMutableTreeNode(projectName);
			
			TraceabilityProcess tProcess = new TraceabilityProcess();
			tProcess.getProjectFiles(filePath, mainNode);
			
		    jContentPane.add(getFilesTreeScroll(mainNode), BorderLayout.WEST);
		    jContentPane.validate();	
		    trace = true;
		}
		
	}
	/**
	 * this method displays a popup menu for the selected file from the project tree
	 * @param e
	 * @param mainNode2 the main node (directory) of the project
	 */
	public void displaySelectedTreeFilePopup(MouseEvent e, DefaultMutableTreeNode mainNode2){
		try {				
			if(SwingUtilities.isRightMouseButton(e)){
				int row=filesTree.getRowForLocation(e.getX(),e.getY());
				//Get the selection path for the row
				TreePath selPath = filesTree.getPathForLocation(e.getX(),e.getY());
				String path = "";
				String parentPath = "";
				if(row != -1) {
					if(e.getClickCount() == 1) {
						DefaultMutableTreeNode node = (DefaultMutableTreeNode) filesTree.getLastSelectedPathComponent();
						DefaultMutableTreeNode auxiliarNode = new DefaultMutableTreeNode();
						if(node.isLeaf()){
							if(node.getParent() == mainNode2){
								path = getProjectPath() + System.getProperty("file.separator") + node.getUserObject();
							}
							else{
								auxiliarNode = node;
								for (int i = 0; i < node.getLevel() - 1; i++) {
									parentPath = auxiliarNode.getParent() + System.getProperty("file.separator") + path;
									auxiliarNode = (DefaultMutableTreeNode) auxiliarNode.getParent();
								}
								path = getProjectPath() + System.getProperty("file.separator") + parentPath + node.getUserObject();
							}
							filesTree.setSelectionPath(selPath);
							JPopupMenu popup = getPopupMenu(path);
							popup.show(filesTree,e.getX(),e.getY());
						}
						else{
							
						}
					}
				}
			}
		} catch (Exception ex) {
			// TODO: handle exception
		}
	}

	
	/**
	 * This method displays the Artifacts traceability graph 
	 */
	public void displayArtifactsGraph(){
		if(trace){
			ArtifactsGraph graph = new ArtifactsGraph(items, links);
			getGraphViewArtifactsPanel().add(graph, BorderLayout.CENTER);
			if(textEditorPane != null) jContentPane.remove(textEditorPane);
			mainPanel.remove(graphPanel);
			graphPanel = graphViewArtifactsPanel;
			mainPanel.add(graphPanel);
			jContentPane.remove(textScroll);
			jContentPane.repaint();
			jContentPane.validate();
		}
		else JOptionPane.showMessageDialog(null, "You have to trace the project first.");
	}
	
	
	/************************ other methods ****************************/	
	public String getProjectPath() {
		return projectPath;
	}

	public void setProjectPath(String projectPath) {
		this.projectPath = projectPath;
	}

	public boolean isTrace() {
		return trace;
	}

	public void setTrace(boolean trace) {
		this.trace = trace;
	}


	public static void main(String[] args) {
		MainWindow main = new MainWindow();
	}
}  
