package org.tom.annotators;

import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.uima.UimaContext;
import org.apache.uima.analysis_component.AnalysisComponent;
import org.apache.uima.analysis_component.CasAnnotator_ImplBase;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.cas.CAS;
import org.apache.uima.cas.FSIndex;
import org.apache.uima.cas.Type;
import org.apache.uima.cas.text.AnnotationFS;
import org.apache.uima.jcas.JCas;
import org.apache.uima.resource.ResourceInitializationException;
import org.tom.DAO.ModeloException;
import org.tom.manager.unstructured.ActorManager;
import org.tom.manager.unstructured.FeatureManager;
import org.tom.types.Actor;
import org.tom.types.ActorArea;
import org.apache.uima.util.Level;

public class ActorAnnot extends CasAnnotator_ImplBase{
	private Pattern[] pat;
	private String[] rule;
	private ActorManager man = new ActorManager();


	public void initialize(UimaContext aContext) throws ResourceInitializationException {
		super.initialize(aContext);
		String[] patterns = (String[]) aContext.getConfigParameterValue("Patterns");
		rule = (String[]) aContext.getConfigParameterValue("Rule");
		pat = new Pattern[patterns.length];
		for (int i = 0; i < patterns.length; i++) {
			pat[i] = Pattern.compile(patterns[i]);
		}
	}

	public void process(CAS aCas) throws AnalysisEngineProcessException{
		CAS actorAreaView = aCas.getView("ActorAreaDocument");
		Type annotType = actorAreaView.getAnnotationType();
		FSIndex actorAreaIndex = aCas.getAnnotationIndex(annotType);

		CAS actorView = aCas.getView("ActorDocument");
		Type annotAType = actorView.getAnnotationType();
		int end = 0;
		StringBuffer translation;

		Iterator actorAreaIter = actorAreaIndex.iterator();
		while (actorAreaIter.hasNext()) {
			ActorArea actorArea = (ActorArea) actorAreaIter.next();
			String text = actorArea.getCoveredText();
			for (int i = 0; i < pat.length; i++) {
				Matcher matcher = pat[i].matcher(text);
				while (matcher.find()) {
					translation = new StringBuffer();	
					int begin = matcher.start() + actorArea.getBegin();
					end = matcher.end()+ actorArea.getBegin();
					AnnotationFS annot = actorAreaView.createAnnotation(annotAType, begin, end);
					translation.append("feature: " + matcher.group(1).trim() + " " + matcher.group(2).trim() );
					try {
						//artifact's name is wrong
						man.actorPersist("", matcher.group(1).trim(), "vision.doc", "", rule[i],matcher.group(2).trim(),matcher.group(3).trim());
					} catch (ModeloException e) {
						e.printStackTrace();
					}
					actorAreaView.addFsToIndexes(annot);

					System.out.println(translation.toString());
					getContext().getLogger().log(Level.FINEST, "Found: " + annot);			    
				}
			}
		}
	}

}
